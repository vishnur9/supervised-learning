i <<- NULL
}
get <- function() x
setinv <- function(inverse) i <<- inverse
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
i <- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinv(i)
i
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
x<-rbind(c(2,1,1),c(-5-3,0),c(1,1,-1))
x<-matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
m = makeCacheMatrix(x)
m$get()
x<-matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=T)
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
x<-matrix(c(2,1,1,-5,-3,0,1,1,-1),nrow=3,ncol=3,byrow=T)
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
data(iris)
c1<-as.factor(iris$Species)
c1
tapply(iris$Sepal.Length,c1,mean)
sapply(mtcars, cyl, mean)
data(mtcars)
mtcars
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
d<-split(mtcars,mtcars$cyl)
d$8
sapply(mtcars, cyl, mean)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
209.2142857-82.6363636
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
Rhelp inverse
help inverse matrix()
? inverse
help inv
? Inv
? Solve
? solve
? solve
c
}
makeCacheMatrix() <- function(x = matrix(c(2,3,1,4,5,6),nrow = 2,ncol=3) {
c<- NULL
set <- function(y) {
x <<- y
c<<- NULL
}
get <- function() x
setinv <- function(inv) c <<- solve(x)
getinv <- function() c
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve() <- function(x, ...) {
c <- x$getinv()
if(!is.null(c)) {
message("getting cached data")
return(c)
}
data <- x$get()
c <- solve(data, ...)
x$setmean(c)
c
}
makeCacheMatrix() <- function(x = matrix(c(2,3,1,4,5,6),nrow = 2,ncol=3) {
c<- NULL
set <- function(y) {
x <<- y
c<<- NULL
}
get <- function() x
setinv <- function(inv) c <<- solve(x)
getinv <- function() c
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve() <- function(x, ...) {
c <- x$getinv()
if(!is.null(c)) {
message("getting cached data")
return(c)
}
data <- x$get()
c <- solve(data, ...)
x$setinv(c)
c
}
makeCacheMatrix() <- function(x = matrix(c(2,3,1,4,5,6),nrow = 2,ncol=3) {
c<- NULL
set <- function(y) {
x <<- y
c<<- NULL
}
get <- function() x
setinv <- function(inv) c <<- inverse
getinv <- function() c
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve() <- function(x, ...) {
c <- x$getinv()
if(!is.null(c)) {
message("getting cached data")
return(c)
}
data <- x$get()
c <- solve(data, ...)
x$setinv(c)
c
}
makeCacheMatrix() <- function(x = matrix()) {
c<- NULL
set <- function(y) {
x <<- y
c<<- NULL
}
get <- function() x
setinv <- function(inverse) c <<- inverse
getinv <- function() c
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve() <- function(x, ...) {
c <- x$getinv()
if(!is.null(c)) {
message("getting cached data")
return(c)
}
data <- x$get()
c <- solve(data, ...)
x$setinv(c)
c
}
makeCacheMatrix <- function(x = matrix()) {
c<- NULL
set <- function(y) {
x <<- y
c<<- NULL
}
get <- function() x
setinv <- function(inverse) c <<- inverse
getinv <- function() c
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve() <- function(x, ...) {
c <- x$getinv()
if(!is.null(c)) {
message("getting cached data")
return(c)
}
data <- x$get()
c <- solve(data, ...)
x$setinv(c)
c
}
makeCacheMatrix <- function(x = matrix()) {
c<- NULL
set <- function(y) {
x <<- y
c<<- NULL
}
get <- function() x
setinv <- function(inverse) c <<- inverse
getinv <- function() c
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
c <- x$getinv()
if(!is.null(c)) {
message("getting cached data")
return(c)
}
data <- x$get()
c <- solve(data, ...)
x$setinv(c)
c
}
makeCacheMatrix <- function(x = matrix()) {
c<- NULL
set <- function(y) {
x <<- y
c<<- NULL
}
get <- function() x
setinv <- function(inverse) c <<- inverse
getinv <- function() c
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
c <- x$getinv()
if(!is.null(c)) {
message("getting cached data")
return(c)
}
data <- x$get()
c <- solve(data, ...)
x$setinv(c)
c
}
k<- matrix(1,2,2,3,4,6),nrow =2, ncol =3 )
k<- matrix(1,2,2,3,4,6)
k<- matrix(1,2,2,3,4,6)
k<-matrix(1:4,2,2)
l<-makeCacheMatrix(k)
cacheSolve(l)
cacheSolve(l)
swirl()
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
Type args(list.files)
args(list.files)
old.dir<-getwd()
dir.create(testdir)
getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls(getwd())
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R",mytest2.R)
file.rename("mytest.R","mytest2.R")
file.copy(mytest2.R,mytest3.R)
file.copy("mytest2.R","mytest3.R")
file.path(mytest3.R)
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd()
setwd("old.dir")
getwd()
Use setwd(old.dir)
setwd(old.dir)
unlink("testdir",recursive = T)
unlink("testdir", recursive = TRUE)
install.packages("ISLR")
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
x=seq(-10,10,length=50)
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
y=x;
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
image(x,y,f)
fa=(f-t(f))/2
persp(x,y,fa)
persp(x,y,fa,phi=30)
persp(x,y,fa,phi=30,theta=30)
view(auto)
summary(auto)
head(Auto)
m(list=ls())
rm(list=ls())
data(InsectSprays)
a<-InsectSprays
require(stats); require(graphics)
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data", varwidth = TRUE, col = "lightgray")
fm1 <- aov(count ~ spray, data = InsectSprays)
summary(fm1)
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0))
plot(fm1)
data(InsectSprays)
a<-InsectSprays
require(stats); require(graphics)
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data", varwidth = TRUE, col = "lightgray")
fm1 <- aov(count ~ spray, data = InsectSprays)
summary(fm1)
str(a)
head(a)
summary(fm1)
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0))
plot(fm1)
fm2 <- aov(sqrt(count) ~ spray, data = InsectSprays)
summary(fm2)
plot(fm2)
par(opar)
main = "InsectSprays data")
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data")
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data")
?barplot
data(InsectSprays)
a<-InsectSprays
str(a)
head(a)
detach("package:stats", unload=TRUE)
detach("package:graphics", unload=TRUE)
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data")
View(a)
rm(list=ls())
data(InsectSprays)
a<-InsectSprays
require(stats); require(graphics)
newdata<-a[(a$spray=='A'),]
newdata1<-a[which(a$spray=='B'),]
newdata2<-a[which(a$spray=='C'),]
newdata3<-a[which(a$spray=='D'),]
newdata4<-a[which(a$spray=='E'),]
newdata5<-a[which(a$spray=='F'),]
avg<-1:6
avg[1]<-mean(newdata$count)
avg[2]<-mean(newdata1$count)
avg[3]<-mean(newdata2$count)
avg[4]<-mean(newdata3$count)
avg[5]<-mean(newdata4$count)
avg[6]<-mean(newdata5$count)
barplot(avg , width = 0.5, space = 0.5,names.arg = ' Spray 1                           Spray 2                  Spray 3        Spray 4  Spray 5 Spray 6',xlab = "Diet", ylab = "Weights", col = 'grey',main='Insect Spray ')
fm1 <- aov(count ~ spray, data = InsectSprays)
summary(fm1)
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0))
plot(fm1)
fm2 <- aov(sqrt(count) ~ spray, data = InsectSprays)
summary(fm2)
plot(fm2)
par(opar)
summary(a)
summary(newdata)
barplot(avg , width = 0.5, space = 0.5,names.arg = ' Spray 1                           Spray 2                  Spray 3        Spray 4  Spray 5 Spray 6',xlab = "Diet", ylab = "Weights", col = 'grey',main='Insect Spray ')
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data", varwidth = TRUE, col = "lightgray")
rm(list=ls())
data(ChickWeight)
a<-ChickWeight
newdata<-a[which(a$Time==21 & a$Diet==1),]
newdata1<-a[which(a$Time==21 & a$Diet==2),]
newdata2<-a[which(a$Time==21 & a$Diet==3),]
summary(a)
View(a)
data(ChickWeight)
a<-ChickWeight
summary(a)
newdata<-a[which(a$Time==21 & a$Diet==1),]
newdata1<-a[which(a$Time==21 & a$Diet==2),]
newdata2<-a[which(a$Time==21 & a$Diet==3),]
newdata3<-a[which(a$Time==21 & a$Diet==4),]
avg<-1:4
avg[1]<-mean(newdata$weight)
avg[2]<-mean(newdata1$weight)
avg[3]<-mean(newdata2$weight)
avg[4]<-mean(newdata3$weight)
barplot(avg)
barplot(avg , width = 0.5, space = 0.5,names.arg = ' diet 1                           diet 2                           diet 3                             diet 4',xlab = "Diet", ylab = "Weights", col = 'red',main='ChickWeight (Span of 21 days)')
rm(list=ls())
data(EuStockMarkets)
re
a<-EuStockMarkets
p<-1:nrow(a)
l<-a[,1]
l1<-a[,2]
l2<-a[,3]
l3<-a[,4]
par(mfrow=c(2,2))
plot(p,l,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l2,type='l2',main="CAC",xlabs='Days',ylabs='Value')
plot(p,l3,type='l3',main = 'FTSE',xlabs='Days',ylabs='Value')
barplot(p,l,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l2,type='l2',main="CAC",xlabs='Days',ylabs='Value')
plot(p,l3,type='l3',main = 'FTSE',xlabs='Days',ylabs='Value')
plot(p,l,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l2,type='l2',main="CAC",xlabs='Days',ylabs='Value')
plot(p,l3,type='l3',main = 'FTSE',xlabs='Days',ylabs='Value')
plot(p,l,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l2,type='l2',main="CAC",xlabs='Days',ylabs='Value')
plot(p,l3,type='l3',main = 'FTSE',xlabs='Days',ylabs='Value')
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
head(EuStockMarkets)
barplot(p,l,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
tail(a)
plot(,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l2,type='l2',main="CAC",xlabs='Days',ylabs='Value')
plot(p,l3,type='l3',main = 'FTSE',xlabs='Days',ylabs='Value')
plot(,type='l',main = "DAX",xlabs='Days',ylabs='Value',ylim=c(1500,8000))
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l2,type='l2',main="CAC",xlabs='Days',ylabs='Value')
plot(p,l3,type='l3',main = 'FTSE',xlabs='Days',ylabs='Value')
plot(p,l1,type='l',main = "DAX",xlabs='Days',ylabs='Value')
plot(p,l1,type='l1',main="SMI",xlabs='Days',ylabs='Value')
plot(p,l2,type='l2',main="CAC",xlabs='Days',ylabs='Value')
plot(p,l3,type='l3',main = 'FTSE',xlabs='Days',ylabs='Value')
plot(p,l1,type='l',main = "DAX",xlab='Days',ylab='Value')
plot(p,l1,type='l1',main="SMI",xlab='Days',ylab='Value')
plot(p,l2,type='l2',main="CAC",xlab='Days',ylab='Value')
plot(p,l3,type='l3',main = 'FTSE',xlab='Days',ylab='Value')
a<-read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
barplot(a$TV,a$Sales,type='l')
a1<-a[order(a$TV),]
a2<-a[order(a$Radio),]
a3<-a[order(a$Newspaper),]
par(mfrow=c(3,1))
plot(a1$TV,a1$Sales,type='l')
plot(a2$Radio,a2$Sales,type='l')
plot(a3$Newspaper,a1$Sales,type='l')
a4<-a[order(a$Sales),]
plot(a4$Sales,a4$TV,type='l')
plot(a4$Sales,a4$Radio,type='l')
plot(a4$Sales,a4$Newspaper,type='l')
head(a)
barplot(a$TV,a$Sales,type='l')
a4<-a[order(a$Sales),]
plot(a4$Sales,a4$TV,type='l')
plot(a4$Sales,a4$Radio,type='l')
plot(a4$Sales,a4$Newspaper,type='l')
a<-read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
a1<-a[order(a$TV),]
a2<-a[order(a$Radio),]
a3<-a[order(a$Newspaper),]
a4<-a[order(a$Sales),]
plot(a4$Sales,a4$TV,type='l')
plot(a4$Sales,a4$Radio,type='l')
plot(a1$TV,a1$Sales,type='l')
plot(a4$Sales,a4$TV,type='l')
plot(a4$Sales,a4$Radio,type='l')
plot(a4$Sales,a4$Newspaper,type='l')
plot(a4$Sales,a4$TV,type='l')
plot(a4$Sales,a4$Radio,type='l')
plot(a4$Sales,a4$Newspaper,type='l')
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
head(Boston)
attach(Boston)
lm.fit= lm(medv~lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=c(5,10,15)))
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval="confidence")
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval="prediction")
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
par(mfrow=c(2,2))
plot(lm.fit)
install.packages("SIT")
options(repos='http://cran.rstudio.com/')
install.packages("SIT")
ap <- available.packages()
ap
View(ap)
"foobarbaz" %in% rownames(ap)
View(ap)
"SIT" %in% rownames(ap)
